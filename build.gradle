buildscript {
    repositories {
        mavenLocal()
        mavenCentral()

        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.6'
        classpath 'org.zeroturnaround:gradle-jrebel-plugin:1.1.2'
    }
}

plugins {
    id 'java'
    id 'war'
    id 'idea'
    id 'eclipse-wtp'
    id 'com.bmuschko.tomcat' version '2.2.2'
    id 'net.saliman.cobertura' version '2.2.8'
}

apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'
apply plugin: 'rebel'

def tomcatHome = '/usr/local/tomcat7'
def appVersion = '1.0-SNAPSHOT'

def appArchiveName = rootProject.name + '-' + appVersion
def appWarName = appArchiveName + '.war'

test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
    reports {
        html.enabled = false
        junitXml.enabled = true
        junitXml.destination = 'shippable/testresults'
    }
}

cobertura {
    coverageFormats = ['xml']
    coverageIgnoreTrivial = true
    coverageIgnores = ['org.slf4j.Logger.*']
    coverageReportDir = new File('shippable/codecoverage')
}

rebel {
    alwaysGenerate = true
    showGenerated = true
}

war {
    archiveName appWarName
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    springVersion = "4.1.6.RELEASE"
    springSecurityVersion = "4.0.1.RELEASE"
    thymeleafVersion = "2.1.4.RELEASE"
    tomcatVersion = "8.0.22"
}

dependencies {
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-orm:$springVersion"
    compile "org.springframework:spring-context-support:$springVersion"

    compile "org.springframework.security:spring-security-web:$springSecurityVersion"
    compile "org.springframework.security:spring-security-config:$springSecurityVersion"
    compile "org.springframework.security:spring-security-taglibs:$springSecurityVersion"

    compile "org.thymeleaf:thymeleaf:$thymeleafVersion"
    compile "org.thymeleaf:thymeleaf-spring4:$thymeleafVersion"
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE"
    compile "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:1.2.8"

    compile "org.hibernate:hibernate-entitymanager:4.3.10.Final"
    compile "org.hibernate:hibernate-validator:5.1.3.Final"
    compile "mysql:mysql-connector-java:5.1.35"
    compile "com.mchange:c3p0:0.9.5"

    compile "joda-time:joda-time:2.8"

    compile "org.slf4j:slf4j-api:1.7.12"
    runtime "org.slf4j:slf4j-log4j12:1.7.12"

    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile "org.hamcrest:hamcrest-library:1.3"

    providedCompile "javax.servlet:javax.servlet-api:3.1.0"

    tomcat "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
}

task deployWar() {
    doLast {
        def tomcatWebAppsHome = tomcatHome + '/webapps/'
        delete tomcatWebAppsHome + appArchiveName

        logger.lifecycle("Deploying ${appWarName} into ${tomcatWebAppsHome} from ${libsDir.getPath()}")

        copy {
            from libsDir
            into tomcatWebAppsHome
            include appWarName
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

check.finalizedBy(project.tasks.cobertura)

war.dependsOn(generateRebel)
deployWar.dependsOn(war)

tomcatRunWar.contextPath = ''
